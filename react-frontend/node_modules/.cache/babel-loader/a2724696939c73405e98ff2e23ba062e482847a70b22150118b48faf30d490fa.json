{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Downloads\\\\MapleHacks\\\\react-frontend\\\\src\\\\search.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UserSearch(_ref) {\n  _s();\n  let {\n    state\n  } = _ref;\n  const [userInput, setUserInput] = useState(\"\");\n  function userType(e) {\n    e.preventDefault();\n    setUserInput(e.target.value);\n  }\n  ;\n  const [gptText, setGPTText] = useState(\"\");\n  async function callgpt(input) {\n    const {\n      Configuration,\n      OpenAIApi\n    } = require(\"openai\");\n    const configuration = new Configuration({\n      apiKey: process.env.REACT_APP_API_KEY\n    });\n    const openai = new OpenAIApi(configuration);\n    const msg = input;\n    const completion = await openai.createChatCompletion({\n      model: \"gpt-3.5-turbo\",\n      messages: [{\n        role: \"user\",\n        content: msg\n      }]\n    });\n    const response = completion.data.choices[0].message.content;\n    console.log(response);\n    setGPTText(response);\n  }\n  ;\n  function userEnter(e) {\n    e.preventDefault();\n    callgpt(\"Give me a recipe in \" + state + \" with \" + userInput);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"searchContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"titleSection\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        id: \"searchTitle\",\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"RECIPES\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 38\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"restSection\",\n      onSubmit: userEnter,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: userType,\n        id: \"input\",\n        className: \"form-control me-2 d-flex clear\",\n        type: \"search\",\n        placeholder: \"Enter Subject Here\",\n        \"aria-label\": \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"inputButton\",\n        className: \"btn btn-outline-success\",\n        type: \"submit\",\n        onClick: userEnter,\n        children: \"\\uD83D\\uDD0E\\uFE0E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"gptText\",\n        children: test\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n_s(UserSearch, \"bMfNSb7GzBv31B6GGHorKNq1hB4=\");\n_c = UserSearch;\nvar _c;\n$RefreshReg$(_c, \"UserSearch\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","UserSearch","_ref","_s","state","userInput","setUserInput","userType","e","preventDefault","target","value","gptText","setGPTText","callgpt","input","Configuration","OpenAIApi","require","configuration","apiKey","process","env","REACT_APP_API_KEY","openai","msg","completion","createChatCompletion","model","messages","role","content","response","data","choices","message","console","log","userEnter","id","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","onChange","className","type","placeholder","onClick","test","_c","$RefreshReg$"],"sources":["C:/Users/User/Downloads/MapleHacks/react-frontend/src/search.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nexport default function UserSearch({state}){\r\n    const [userInput, setUserInput] = useState(\"\");\r\n    function userType(e){\r\n        e.preventDefault();\r\n        setUserInput(e.target.value);\r\n    };\r\n    const [gptText, setGPTText] = useState(\"\");\r\n    async function callgpt(input){\r\n        const { Configuration, OpenAIApi } = require(\"openai\");\r\n        \r\n        const configuration = new Configuration({\r\n          apiKey: process.env.REACT_APP_API_KEY,\r\n        });\r\n        const openai = new OpenAIApi(configuration);\r\n         \r\n        const msg = input;\r\n        \r\n        const completion = await openai.createChatCompletion({\r\n        model: \"gpt-3.5-turbo\",\r\n        messages: [{role: \"user\", content: msg}],\r\n        });\r\n      \r\n        const response = completion.data.choices[0].message.content;\r\n        console.log(response);\r\n        setGPTText(response);\r\n    };\r\n    \r\n    function userEnter(e){\r\n        e.preventDefault();\r\n        callgpt(\"Give me a recipe in \"+state+\" with \"+userInput);\r\n\r\n    }\r\n    \r\n    return(\r\n        <div id=\"searchContainer\">\r\n            <div id=\"titleSection\">\r\n                <h1 id=\"searchTitle\"><strong>RECIPES</strong></h1>\r\n            </div>\r\n            <form id=\"restSection\" onSubmit={userEnter}>\r\n                <input onChange={userType} id=\"input\" className=\"form-control me-2 d-flex clear\" type=\"search\" placeholder=\"Enter Subject Here\" aria-label=\"Search\"></input>\r\n                <button id=\"inputButton\" className=\"btn btn-outline-success\" type=\"submit\" onClick={userEnter}>ðŸ”Žï¸Ž</button>\r\n                <p id=\"gptText\">{test}</p>\r\n            </form>\r\n        </div>\r\n    );\r\n\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}